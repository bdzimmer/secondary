# Copyright (c) 2016 Ben Zimmer. All rights reserved.

!collection
id: documentation
name: Documentation
path: master

!item
id: layout
name: Project Layout
path: Documentation

#### Setup

See the repo's `README.md` for setup instructions. After building, make sure the `dist` directory (which contains the `secondary` / `secondary.bat` launch script) or a copy of it is on your path.

#### Run

A Secondary project exists in a directory. Invoke the `secondary` command with a project directory as the working directory to interact with the project.

#### Directory Structure

Files and subdirectories within a project include:

* `secondary.properties` - project configuration in [.properties](https://en.wikipedia.org/wiki/.properties) format. This file can be edited with a text editor or with a GUI via the command `secondary configure`. Every configurable property has a default value, which will be displayed when Secondary loads the project. It's a good idea, however, to understand and update the settings. See {{link: Project Layout | Configuration}}.
* `content/` - content files, typically text documents with `.sec` extension or images, are placed here.
* `web/` - location of exported world encyclopedia web site.
* `wikicache/` - cache for full-size images downloaded from Wikimedia during the export process.
* `status_*.txt` - files tracking hashes of {{Items}} to accelerate the export process. A full export (which should be done occasionally) can be performed by deleting these files before export or running export with with the `force` switch. See {{Commands}}.

#### Configuration

Many configuration options are available in `secondary.properties`, and most relate to HTML export behavior.

* `masterName` - prefix (not including `.sec`) of the *master content file*. The first item in this file is the *master collection*: the top of the hierarchy. The master collection is rendered as the home page of the world encyclopedia web site.
* `license` - License to be included at the bottom of exported HTML pages. Use `&copy` for the copyright symbol: &copy.
* `navbars` - boolean; whether to include navbars on pages. Only real reason to disable this is for rendering single page websites.
* `subarticles` - boolean; if true, include subarticle lists in HTML pages for collection items.
* `relativeLinks` - boolean; if true, include links for previous, parent, and next item in the navbar.
* `hiddenItems` - semicolon-separated list of item ids or names. These items will not appear in lists of subarticles or main collection outlines on the rendered home page.
* `unifiedJumbotron` - boolean; if true, all jumbotrons will display the name and description of the master collection. Useful for creating a generic website.
* `search` - boolean; if true, include search field on home page navbar.


!item
id: commands
name: Commands
path: Documentation

#### Interactive Mode

Running `secondary` with no additional flags will start Secondary in interactive mode. Run commands one at a time, and exit with `exit`, `quit`, or `q`.

#### Commands

To execute an individual command, use `secondary <command> [additional options]`. If the command requires an item to be specified, it may be specified by id or name. If a name contains spaces, it may be quoted or separated across multiple parameters for convenience. Available commands:

* `animate <item>` - render flight animation videos of all `flightanimation` tags in `<item>`. This can be time and CPU intensive, so it does not happen by default on export.
* `basic <item>` - export an item to basic HTML. Useful for conversion to `.docx` format for manuscript submissions.
* `browse` - browse exported project web site's home page. Uses Java's `Desktop.getDesktop.browse()`.
* `configure` - edit project configuration in a GUI.
* `duplicate <item>` - detect duplicate words in an item's notes.
* `edit <item>` - edit the source file for an item using Notepad++; assumes `notepad++` command is on path and will open the file at the correct line. Currently only works in interactive mode.
* `editor` - pixel editor (alpha).
* `epub <item>` - export a book item to EPUB. See {{Publishing}}.
* `explore` - explore project `content` directory. Uses Java's `Desktop.getDesktop.open()`.
* `export` - export the world encyclopedia website. Add the optional `force` switch to regenerate all items, even if they haven't been updated.
* `latex` - export a book to LaTeX. See {{Publishing}}.
* `orbits` - orbits editor (alpha).
* `screenshot` - screenshot utility (alpha).
* `server` - server mode. Reruns export every 10 seconds.
* `sprint <item>` - interactive writing sprint tool. Shows initial wordcount of item's notes. Press enter to show words added and words per hour rate. Press q to quit.
* `styles` - add stylesheets, Google fonts, and related scripts to the project's `web` directory.
* `help` - show usage and a summary of commands.

#### Build Script

For typical use, `secondary export` is used most frequently. This refreshes the world encyclopedia and tags related to content that you are editing, such as tasks, footnotes, and quotes. The `export` command usually completes within a few seconds.

However, it does not refresh all content. It's recommended to create one or more build scripts for your project that include the various invocations of Secondary required to generate all project artifacts and run additional conversion commands on them.


!item
id: items
name: Items
path: Documentation

#### Content Files

The meat of a Secondary project is its *content files*. These are text files (usually with a `.sec` extension) that live in a project's `content` subdirectory.

A content file describes one or more *items*. Each item corresponds to a single page in the world encyclopedia, but it may be possible to render one or more additional pieces of content such as images, or an EPUB or LaTeX document from an item.

Each item begins with a header. The first line of the header is exclamation mark (!) followed by the item type. A list of property key-value pairs (with a colon and space separating the key and value) follows on the next few lines. After a blank line, the item's notes begin, and notes end when a new item header begins. Here's an example:

    !item
    id: test
    name: Test Item
    path: Test Parent

    Here's the notes of the item.

    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.

    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

    This is the last line of the notes that belong to item "test".

    !item
    id: test2
    ...

All items types have the following properties:

* `id` - unique identifier of the item. Must also be a valid file prefix. If not specified, it will be derived from `name`.
* `name` - display name or title of the item. Does not have to be unique.
* `description` - optional description. Defaults to empty.
* `path` - id or name of the item's parent item. Required for all items except the master collection. The parent item must be a collection; see below.
* `notes` - body text of the item. Usually written out over multiple lines after the end of the key-value pairs and before the header of the next item. However, it can be included in the property lines instead. Useful for items with single-line notes.

Different types of items have special functionality and may have additional properties specific to their purpose.

#### Item Types

* **!item**, **!thing**
    * Generic item.
* **!collection**
    * Represents collection of items.
    * Has a list of child items (constructed from items that refer to it in their `path` property). Children are rendered as a list of links to subarticles at the end of the page.
    * In general, when linking or referring to an item, it does not matter which collection it belongs to or where in the hierarchy it falls. However, some {{Tags}}, such as `tasks` and `timeline`, recurse through collection hierarchies to gather information.
    * Collections whose parent is the master collection (the first item in the master file) are rendered on the home page.
* **!place**, **!location**
    * Describes a place.
    * No special functionality.
    * Slated for deprecation.
* **!character**, **!person**
    * Describes a character.
    * A character's `name` property is parsed into *name parts*, which allows Secondary to handle the character's name intelligently in different contexts.
        * To use name parts syntax, place a vertical pipe between first and last names and observe how the character's name is displayed in jumbotrons, links, and indices.
        * {{todo: describe "name parts" behavior in greater detail}}
        * {{todo: describe behavior with links}}
    * Certain types of event tags are functional only for characters, and relationship tags can describe familial relationships between them.
* **!image**
    * Describes an image.
    * Has an additional `filename` property which is either a local file name relative to the `content` directory or the description of a Wikimedia image. This is constructed by removing the `File:` prefix and adding a `wikimedia:` prefix.
    * Upon first export, Wikimedia images are downloaded at full resolution along with metadata into `wikicache`. This allows pages generated for Wikimedia image items to include information about the artist and license as well as a link to the source. See {{Red Riding Hood - Rackham}} for an example.
* **!trip**
    * Describes an interplanetary flight or series of flights.
    * Tags relating to interplanetary flights function in trips.
* **!book**
    * Describes a story or novel.
    * Additional properties:
        * `uniqueIdentifier` - unique "notISBN" id to be included in EPUB
        * `authorname` - name of the author described with "name parts" synatx.
    * Markdown headings (lines that begin with `#`) in the notes of books divide them into sections. The first section will become the title page and remaining sections the chapters.
    * The title of the book when publishing is *not* the name of the item (which may include markdown for styling) but the text of the heading of the first section.
    * Books are given formatting that resembles print typesetting when rendered to HTML.
    * See {{Publishing}}.
* **!tileset**, **!spritesheet**, **!map**
    * Special game design functionality. Not documented.

#### !include

The `include` item type is a special pseudo-item. Item only one property, `filename`, which specifies a file name (including extension) of another content file.

#### Item Ordering

A collection's list of children is ordered. The order that items occur in files (including the use of the `include` pseudo-item) determines this order.

!collection
id: tags
name: Tags
path: Documentation

### Overview
---

A key feature of Secondary is a special set of tags that you can use in the notes of any item. Some of these function like tags in wiki markup, while others have purposes that are more specific to worldbuilding. Tags take the following form:

`{{demo: tag_name | value | arg1=value1 | arg2=value2 | arg3=value3 ...}}`

For {{link: tags | Item Tags}}, `value` is usually the id or name of an item in your world. For {{link: tags | Task Tags}}, `value` is usually a sentence or two of descriptive text, and for {{link: tags | Event Tags}}, `value` is a date. Some tags take additional arguments, usually key-value pairs whose order does not matter. Default values for arguments are listed in the usage description for each tag.

<br />


### Item Tags
---

Item tags add relationships between items, insert images and links in notes, or create charts and visualizations.

---

#### anchor

Add an anchor that can be referenced via a {{link: Tags | link}} tag.

**Usage**

`{{demo: anchor | description | id=anchor}}`

* **description**: text to enclose in the anchor
* **id**: unique id (within the page) for the anchor

**Example**

`{{demo: anchor | This is an anchor with id "anchor-tag". | id=anchor-tag}}` &rarr; {{anchor: This is an anchor with id "anchor-tag". | id=anchor-tag}}

---

#### familytree

Insert the family tree of a character and their descendants.

**Usage**

`{{demo: familytree | character}}`

* **character**: name or id of character item

Family relationships are established by using any of the following item tags in the notes of characters:

* **father**, **mother**, **parent**
* **son**, **daughter**, **child**
* **ancestor**
* **descendant**
* **marriage**

For example, the tag `{{demo: mother | Lady Catherine de Bourgh}}` in the notes of {{Anne de Bourgh}} indicates that {{Lady Catherine de Bourgh}} is Anne's mother.

**birth** and **death** tags in a character's notes will add lifespan dates to their entry in the family tree. See {{link: tags | Event Tags}} below for more about these tags.

**Examples**

`{{demo: familytree | Lady Catherine de Bourgh}}`

{{familytree: Lady Catherine de Bourgh}}

See {{link: Genealogy Examples}} for further details.

---

#### image

{{image: image_red_riding_hood}}

Insert an image.

**Usage**

`{{demo: image | item | link=true | responsive=false}}`

* **item**: name or id of image item
* **link**: add a link from the image back to its page
* **responsive**: resize the image to fit the width of the page

If the image is not responsive, it will be right aligned with a maximum width of 320px.

**Example**

`{{demo: image | image_red_riding_hood}}`

---

#### jumbotron

Set the background image, image position, and text color of the article jumbotron.

**Usage**

`{{demo: jumbotron | image | xpos=0% | ypos=50% | color=black}}`

* **image**: name or id of image item
* **xpos**: image x-position, in percentage (%) or pixels (px)
* **ypos**: image y-position, in percentage or pixels
* **color**: text color

**Examples**

`{{demo: jumbotron | image_alice | ypos=50%}}`

{{jumbotron: image_alice | ypos=50%}}

See jumbotron at top of page.

---

#### link

Create a link to an item.

**Usage**

`{{demo: link | item | heading}}`

`{{demo: link | item | description | id}}`

* **item**: name or id of item
* **heading** (optional): name of heading within item's notes
* **description**: text to display
* **id**: id of anchor generated with {{link: Tags | anchor}} tag

Because link is the most often used tag, `link:` is optional if it is being used without an heading argument or description and id arguments.

**Examples**

`{{demo: link | Project Layout}}` &rarr; {{link: Project Layout}}

`{{demo: link | Tags | Event Tags}}` &rarr; {{link: Tags | Event Tags}}

`{{demo: link | Tags | Link to anchor with id "anchor-tag" | anchor-tag}}` &rarr; {{link: Tags | Link to anchor with id "anchor-tag" | anchor-tag}}

---

#### timeline

Insert a timeline of all events in a hierarchy of items.

**Usage**

`{{demo: timeline | item | format=monthDayParagraph}}`

* **item**: name or id of an item; events will be gathered from the item and all items underneath it in the hierarchy.
* **format**: one of several formatting options:
    * **dayTable**: create a heading for each year, and a table for each month. The first cell in the row contains a day of the month, and the second cell contains a paragraph of the events of that day. Best for closely-spaced events.
    * **monthDayParagraph**: create a heading for each year, with a paragraph of the events of each month. Best for events with greater spacing.
    * **yearTable**: create a single table. The first cell in the row contains a year, and the second cell contains a paragraph of the events of that year. Best for events with the greatest spacing.

Events are described using {{link: tags | Event Tags}}.

**Example**

This timeline tag gathers event tags from the examples in the next section.

`{{demo: timeline | tags | format=monthDayParagraph}}`

{{timeline: tags | format=monthDayParagraph}}

<br />

### Event Tags
---

Event tags describe events, which can be gathered into a timeline with the {{link: Tags | timeline}} tag. The `value` of an event tag is a date, which can consist of the full month, day, and year; month and year, or year:

* June 1, 1940
* June 1940
* 1940

The parts of the date must be separated by at least one comma or a whitespace character, with additional whitespace allowed.

---

#### birth / death

Describe the birth or death of a character.

**Usage**

`{{demo: birth | date | description}}`

`{{demo: death | date | description}}`

* **date**: date of birth or death of the character whose notes this tag appears in
* **description**: description of the event

Birth and death tags may be added to any page, but it only make sense to add them to the notes of a character, since they describe the birth and death of that character.

**Example**

`{{demo: death | November 23, 1926 | Angell dies after "a careless push" from a sailor.}}`

{{death: November 23, 1926 | Angell dies after "a careless push" from a sailor.}}

---

#### event

Describe an event.

**Usage**

`{{demo: event | date | description}}`

* **date**: date of the event
* **description**: description of the event

**Examples**

`{{demo: event |  March 23, 1925 | *Alert*--manned by the crew of *Emma*--arrives at R'lyeh.}}`

{{event: March 23, 1925 | *Alert*--manned by the crew of *Emma*--arrives at R'lyeh.}}

`{{demo: event |  April 12, 1925 | *Vigilant* rescues *Alert*.}}`

{{event: April 12, 1925 | *Vigilant* rescues *Alert*.}}

<br />

### Task Tags
---

Task tags describe thoughts and work items in various stages of completion. Tasks are gathered from the entire world hierarchy into tables and outlines on the Tasks page of the generated site.

---

#### thought / todo / started / done / blocked

Describe a task.

**Usage**

`{{demo: task_type | description | log=None | start=None | done=None}}`

* **task_type**: thought, todo, started, done, or blocked
* **description**: description of the task
* **log**: date that the task was first recorded
* **start**: planned or actual start date
* **done**: planned or actual finish date

Currently, dates are simple strings and are not parsed further. For meaningful sorting, use numerical year-month-day dates with consistent numbers of digits.

**Examples**

`{{demo: todo | Add additional example events | log=2016-03-09 | start=2016-03-10}}`

{{todo: Add additional example events | log=2016-03-09 | start=2016-03-10}}

`{{demo: done | Add example events from the Lovecraft Mythos | log=2016-03-08 | start=2016-03-09 | done=2016-03-09}}`

{{done: Add example events from the Lovecraft Mythos | log=2016-03-08 | start=2016-03-09 | done=2016-03-09}}


!collection
id: genealogy
name: Genealogy Examples
path: Tags

See the child pages for explanations of the tags used to establish the relationships in the family tree.

`{{demo: familytree | Anonymous Earl}}`

{{familytree: Anonymous Earl}}

!character
id: earl
name: Anonymous Earl
path: genealogy

!character
id: lady_catherine
name: Lady Catherine | de Bourgh
path: genealogy

`{{demo: father | Anonymous Earl}}` &rarr; {{father: Anonymous Earl}}

!character
id: sir_lewis
name: Sir Lewis | de Bourgh
path: genealogy

`{{demo: marriage | Lady Catherine de Bourgh}}` &rarr; {{marriage: Lady Catherine de Bourgh}}

!character
id: anne_debourgh
name: Anne | de Bourgh
path: genealogy

`{{demo: father | Sir Lewis de Bourgh}}` &rarr; {{father: Sir Lewis de Bourgh}}
`{{demo: mother | Lady Catherine de Bourgh}}` &rarr; {{mother: Lady Catherine de Bourgh}}

!character
id: anne_darcy
name: Lady Anne | Darcy
path: genealogy

`{{demo: father | Anonymous Earl}}` &rarr; {{father: Anonymous Earl}}
`{{demo: marriage | Mr. Darcy}}` &rarr; {{marriage: Mr. Darcy}}

!character
id: mr_darcy
name: Mr. | Darcy
path: genealogy

!character
id: georgiana
name: Georgiana | Darcy
path: genealogy

`{{demo: father | Mr. Darcy}}` &rarr; {{father: Mr. Darcy}}
`{{demo: mother | Lady Anne Darcy}}` &rarr; {{mother: Lady Anne Darcy}}

!character
id: fitzwilliam_darcy
name: Fitzwilliam | Darcy
path: genealogy

`{{demo: father | Mr. Darcy}}` &rarr; {{father: Mr. Darcy}}
`{{demo: mother | Lady Anne Darcy}}` &rarr; {{mother: Lady Anne Darcy}}
`{{demo: marriage | Elizabeth Bennet}}` &rarr; {{marriage: Elizabeth Bennet}}

!character
id: elizabeth
name: Elizabeth | Bennet
path: genealogy

!item
name: Publishing
path: Documentation

{{todo: Publishing}}

!item
name: Glossary
path: Documentation

{{todo: Glossary}}
