// Copyright (c) 2015 Ben Zimmer. All rights reserved.

//8-15-09 Got the multiple window stuff working. Has palette, sprite, tile, and main window.
//8-30-09 Added event listeners for sub-windows.
//8-31-09 Worked on ZoomedTile class for displaying zoomed tiles and sprites.
//11-22-09 Reworked ZoomedTile as ZoomTile window. Starting to apply Java knowledge gained and 
// get this program working better.
//11-24-09 Working on palette, current color etc.
//11-25-09 etc...etc.. non-descript updates
//11-26-09 Thanksgiving. Getting drawing on tiles working.
//11-29-09 Got dragging working.
//12-1-09 Adding tiled tile display to zoomin window, as well as start of tile properties.
// getting a few features such as overlay tile, lighten, darken, etc in there.
//12-2-09 Tile props loading and display. Small mods, relocating of functions etc.
//12-5-09 Added saving for tilesets (seems to be working.) Working with palette editor a bit.
//12-6-09 Palette editing-spinners added, generally working. Tile props editing (not just display.)
//12-9-09 Snow Day! Moving some code around and renaming.
//12-12-09 Working on Tileset window so sprites can be loaded. Loads sprites now (still some fixes
// need to be made.)
//12-16-09 Map editing start! Loads and displays maps (overlays too) Keys move map view.
// Actual map editing. Keylisteners for palette window.
//12-19-09 Small fixes, further work on map editor
//12-20-09 Trying to get map editor to save (fail) Small fixes.
//12-22-09 Map saves now.
//12-25-09 Map bounds drawing, map description and tile file name editing.
//Bug in tile bounds setting. New map option, status bar with map coords.
//12-27-09 Start of choosing different options for loading sprites.
//12-29-09 More of above. More errors. I think errors come from the NView stuff, which I disabled
//now. Seems to work now.
//12-31-09 Loading (and I think saving) sprites of multiple sizes now seems to work.
//1-1-10 Sprites weren't copying--fixed.
//1-3-10 Spinners in palette window get updated on click.
//1-14-10 I trust this enough now to turn it loose on the workdat folder.

// 5-23-10 Adding a floodfill feature to tile / sprite editor. Works..should be easy to add 
// similar functionality to map editor. Pen toggle button displays current pen. Changes to tiles
// are only updated to tileset window on mouse
// release...this speeds things up.

//6-4-10 Adding code for editing a parallax map layer.
//6-6-10 Sometimes keys quit working on map window...wonder why this is. Need to add blacken 
//sometime here.
//6-17-10 Adding code for tools to swap colors 0 and 255 in tiles / sprites as well as blacken.

//7-28-10 Thinking about some changes where palettes are no longer static among all DosGraphics, 
// but the main program would have a list of palettes, and new windows linked to a specific palette
// can be created at any time.
// Gonna have to move the listeners for the zoomed tiles and sprites...Trying to do this...
// Sucess with seperating click handling and zoom windows into TilesetWindow class--this cleaned 
// things up. Also trying to limit a lot of unnecessary printing to console...stuff generally
// works now. Added tiles to list of sprite type options for window. Some issues with map display 
// after changing tile type in tileset window.
//7-30-10 Fixed a couple bugs generated by the above.
//8-26-10 Adding options for 16 or 32 32x32 frame sprites...
//9-11-10 Adding tweaks that allow copying of tiles across tilesets. Seems to work.

//10-6-10 Dinging around a little with the idea of a world editor.
//10-12-10 More with world editor.
//10-13-10 More with world editor. Actually starting to get somewhere. Modifying constructors
//for allowing world editor to open files for editing.
//10-15-10 More on above.

//10-22-10 Working on actual editor for scriptfile. Didn't get too far.

// Using this to demo SVN!

// 2015-01-10: converting to use new TileOptions class. 

package bdzimmer.secondary.editor.view;

import bdzimmer.secondary.editor.model.ContentStructure;
import bdzimmer.secondary.editor.model.Map;
import bdzimmer.secondary.editor.model.TileOptions;
import bdzimmer.secondary.editor.model.Tiles;
import bdzimmer.secondary.export.model.CollectionItem;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;



public class Main extends JFrame {

  private static final long serialVersionUID = 1L;
  
  public static final int[][] globalPalette = new int[256][3];
  public static final PaletteWindow paletteWindow = new PaletteWindow(globalPalette);
  
  public final String contentDir;
  public final CollectionItem master;

  
  public static int[][] currentTileBitmap;
  public static int currentTile;
  public static int currentColor; // for now

  

  /**
   * Create a new Main window.
   * 
   * @param contentDir  Content directory
   * @param title       Title of the Main window
   */
  public Main(String contentDir, String title, CollectionItem master) {
    
    System.out.println("content directory: " + contentDir);
    
    this.contentDir = contentDir;
    this.master = master;
 
    Main.paletteWindow.setLocationRelativeTo(null);

    setAlwaysOnTop(true);
    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    setTitle(title);

    // Menubar
    JMenuBar mainMenu = new JMenuBar();
    setJMenuBar(mainMenu);

    JMenu fileMenu = new JMenu("File");
    mainMenu.add(fileMenu);
    
    JMenuItem jmExit = new JMenuItem("Exit");
    jmExit.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        dispose();
      }
    });
    fileMenu.add(jmExit);

    // Add buttons for spawning new windows.
    this.setLayout(new GridLayout(5, 1, 5, 5));

    JButton addTileMapWindow = new JButton("Add Tileset / Map Windows");
    addTileMapWindow.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {
        createLinkedTileAndMapWindows(null, null);
      }
    });
    this.add(addTileMapWindow);
    
    JButton addSpriteWindow = new JButton("Add Sprite Window");
    addSpriteWindow.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {

        // Tiles t = new Tiles(TileOptions.NPC);

        Tiles spriteTiles = new Tiles(TileOptions.getOrQuit("NPC"));

        TilesEditorWindow spriteWindow = new TilesEditorWindow(
            Main.this.contentDir + File.separator + ContentStructure.SpriteDir(),
            spriteTiles, "Sprites",
            "", Main.paletteWindow);
        spriteWindow.dosGraphics.setRgbPalette(globalPalette);

        spriteWindow.setLocationRelativeTo(null);

      }
    });
    this.add(addSpriteWindow);

    JButton addWorldWindow = new JButton("Load Script Files");
    addWorldWindow.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {
        new ScriptFileWindow(Main.this, "").setLocationRelativeTo(null);
      }
    });
    this.add(addWorldWindow);

    JButton addTilesetListWindow = new JButton("Load Map Tiles");
    addTilesetListWindow.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {
        new TilesLoadWindow(Main.this).setLocationRelativeTo(null);
      }
    });
    this.add(addTilesetListWindow);

    JButton addMapListWindow = new JButton("Load Maps");
    addMapListWindow.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent arg0) {
        new MapLoadWindow(
            Main.this,
            Main.this.contentDir + File.separator
            + ContentStructure.MapDir()).setLocationRelativeTo(null);
      }
    });
    this.add(addMapListWindow);

    this.pack();
    setVisible(true);

  }

  /**
   * Create a TileWindow / MapWindow pair that share the same tile set.
   * 
   * @param tileFileName  absolute path of tiles file
   * @param mapFileName   absolute path of map file
   */
  public void createLinkedTileAndMapWindows(String tileFileName, String mapFileName) {

    Tiles tiles;
    if (!"".equals(tileFileName)) {
      tiles = new Tiles(
        TileOptions.getOrQuit("Tiles"),
        new File(tileFileName),
        Main.globalPalette);
    } else {
      tiles = new Tiles(TileOptions.getOrQuit("Tiles"));
    }
    
    Map map;
    if (!"".equals(mapFileName)) {
      map = new Map(new File(mapFileName));
    } else {
      map = new Map();
    }
    
    TilesEditorWindow tileWindow = new TilesEditorWindow(
        Main.this.contentDir + File.separator + ContentStructure.TileDir(),
        tiles, "Tileset",
        tileFileName, Main.paletteWindow);
    
    new MapEditorWindow(
        contentDir + File.separator + ContentStructure.MapDir(),
        map,
        mapFileName,
        tileWindow.getTileSet(),
        Main.globalPalette);
    
    tileWindow.toFront();

  }

  /**
   * Program entry point.
   * 
   * @param args  command line arguments
   */
  public static void main(String[] args) {
    // new Main(System.getProperty("user.dir"), "Secondary Editor");
  }

}
